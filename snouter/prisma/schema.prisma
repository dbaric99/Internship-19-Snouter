// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum State {
  NEW
  USED
  DAMAGED
}

// User table
model User {
  id              Int       @id @default(autoincrement())
  firstName       String?
  lastName        String?
  username        String    @unique
  email           String    @unique
  hash            String
  role            Role      @default(USER)
  phoneNumber     String?
  address         Address?  @relation(fields: [addressId], references: [id])
  addressId       Int?
  products        Product[]
  profileImageUrl String?
}

// Address table
model Address {
  id     Int    @id @default(autoincrement())
  street String
  users  User[]
  city   City   @relation(fields: [cityId], references: [id])
  cityId Int
}

// City table
model City {
  id        Int       @id @default(autoincrement())
  name      String
  zip       String
  addresses Address[]
  county    County    @relation(fields: [countyId], references: [id])
  countyId  Int
}

model County {
  id     Int    @id @default(autoincrement())
  name   String
  cities City[]
}

// Product table
model Product {
  id            Int                    @id @default(autoincrement())
  name          String
  description   String?
  price         Float
  createdAt     DateTime               @default(now())
  updatedAt     DateTime?
  state         State
  isSold        Boolean                @default(false)
  subcategory   Subcategory            @relation(fields: [subcategoryId], references: [id])
  subcategoryId Int
  seller        User                   @relation(fields: [sellerId], references: [id])
  sellerId      Int
  productSpecs  ProductSpecification[]
  images        String[]
}

// Category table
model Category {
  id            Int                     @id @default(autoincrement())
  name          String
  subcategories Subcategory[]
  categorySpecs CategorySpecification[]
}

// Subcategory table
model Subcategory {
  id               Int                        @id @default(autoincrement())
  name             String
  products         Product[]
  category         Category                   @relation(fields: [categoryId], references: [id])
  categoryId       Int
  subcategorySpecs SubcategorySpecification[]
}

// CategorySpecification table
model CategorySpecification {
  id              Int           @id @default(autoincrement())
  name            String
  category        Category      @relation(fields: [categoryId], references: [id])
  categoryId      Int
  specification   Specification @relation(fields: [specificationId], references: [id])
  specificationId Int
}

// SubcategorySpecification table
model SubcategorySpecification {
  id              Int           @id @default(autoincrement())
  name            String
  subcategory     Subcategory   @relation(fields: [subcategoryId], references: [id])
  subcategoryId   Int
  specification   Specification @relation(fields: [specificationId], references: [id])
  specificationId Int
}

// Specification table
model Specification {
  id               Int                        @id @default(autoincrement())
  categorySpecs    CategorySpecification[]
  subcategorySpecs SubcategorySpecification[]
  productSpecs     ProductSpecification[]
}

// ProductSpecification table
model ProductSpecification {
  id              Int           @id @default(autoincrement())
  value           String
  product         Product       @relation(fields: [productId], references: [id])
  productId       Int
  specification   Specification @relation(fields: [specificationId], references: [id])
  specificationId Int
}
